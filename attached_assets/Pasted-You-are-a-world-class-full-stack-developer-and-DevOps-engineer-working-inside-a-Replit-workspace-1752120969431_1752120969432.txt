You are a **world‑class full‑stack developer and DevOps engineer** working inside a Replit workspace that contains a fork of the public repository [https://github.com/harleyfan91/site-deconstructor](https://github.com/harleyfan91/site-deconstructor).

Your mission is to implement **only** the following backend changes. **Do not modify any frontend UI components or styling.**

---

## Scope of Work (no extras)

1. **Delete all `quick` analysis code paths.**  They were deprecated—every API route, helper, or cached artefact whose name contains `quick` must be removed.
2. **Add *Page Load Time* as the 4ᵗʰ metric in the existing *Performance Metrics* section of the *Performance* tab.**

   * Collect the metric via **Lighthouse** (desktop & mobile runs), not Google PSI.
   * Persist the two numbers (`pld_desktop`, `pld_mobile`) in Supabase under the existing performance cache record.
   * The React component already renders the first three slider metrics (CLS, LCP, INP). Extend that component to accept a `pageLoadTime` prop **but do not visually redesign—reuse the same slider UI**.
   * Default device shown in the UI should match the device used during analysis (`device === 'desktop' ? pld_desktop : pld_mobile`).
3. **Overview tab becomes a pure aggregator.**  Remove local calculations and wire each card/grid value to fetch the canonical data from the specialised tabs’ API routes.

   * If, after the specialised route has returned, a particular datum is still absent (because that analysis has never been performed), set the value to the literal string `"!"`. **Do not use `"!"` as a loading indicator; loading states should continue to render the existing spinner UI.**
   * Emit a log/console warning so the maintainer sees which analyses are missing. **Do not invent new heuristics to fill gaps.**

---

## Implementation Tips

### 1. Deprecate Quick Analysis

```bash
# Search and destroy
grep -R "\/api\/analyze\/quick" server | cut -d: -f1 | sort -u
# Remove or refactor each occurrence.
```

* Delete `performLocalAnalysis()` if it’s solely used by quick routes. The rich/performance routes stay.

### 2. Lighthouse Page‑Load Time

```ts
// server/lib/runLighthouse.ts (already exists from earlier upgrade)
const lhr = await runLighthouse(url, ['performance']);
const pageLoadTime = lhr.audits['interactive'].numericValue; // in ms
```

* Store as `pld_desktop` or `pld_mobile` keyed by `emulatedFormFactor`.
* Update `/api/performance` JSON response to include:

```jsonc
{
  "coreWebVitals": { ... },
  "pageLoadTime": {
     "desktop": 3200,
     "mobile": 4800
  }
}
```

### 3. Overview Aggregator Logic

* Create `/api/overview` (if not yet present) that calls

  * `POST /api/seo`
  * `GET /api/tech`
  * `GET /api/performance`
  * `GET /api/ui`
  * `POST /api/content`
* Merge their responses into the legacy Overview schema, replacing any **permanently unavailable** fields with `"!"` (again, never during loading – use the standard spinner until the route resolves).
* Remove any legacy heuristics in Overview routes/components.

---

## Caching Rules

* **Supabase first**: use `INSERT ... ON CONFLICT ...` for `performance` table when saving Page‑Load Time fields.
* If adding columns `pld_desktop` / `pld_mobile` to an existing table, **pause implementation and output:**

  > `SCHEMA CHANGE NEEDED: add columns pld_desktop bigint, pld_mobile bigint to table performance_metrics`.

---

## Acceptance Checklist

* [ ] All `quick` prefixed endpoints and helpers removed.
* [ ] `/api/performance` returns new `pageLoadTime` object (desktop & mobile) sourced from Lighthouse and cached.
* [ ] Performance tab slider shows Page Load Time as 4ᵗʰ metric, defaulting to device used.
* [ ] Overview tab values now fetched exclusively from specialised routes; permanently missing data replaced by `!` (never used as a loading placeholder) with console warnings.
* [ ] No unrelated frontend or stylistic changes introduced.

Return `✅ Done` after all checklist items pass tests **or** notify with `SCHEMA CHANGE NEEDED` if database migration is required.
