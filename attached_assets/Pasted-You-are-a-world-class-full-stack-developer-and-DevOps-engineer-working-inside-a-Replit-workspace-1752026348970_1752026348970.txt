You are a **world‑class full‑stack developer and DevOps engineer** working inside a Replit workspace that contains a fork of the public repository [https://github.com/harleyfan91/site-deconstructor](https://github.com/harleyfan91/site-deconstructor).

Your mission is to implement the following backend enhancements **WITHOUT adjusting the Overview tab or adding new frontend UI elements throughout the dashboard**.

---

## High‑Level Goals

1. **Replace PageSpeed‑based SEO scoring with Lighthouse.**
2. **Populate the Tech tab placeholders** using Lighthouse (Best‑Practices JSON) **and axe‑core**.
3. **Inject axe‑core into the UI analysis** to surface real contrast warnings.
4. **Use Lighthouse for Performance / Core Web Vitals** metrics.
5. **Introduce pa11y** where it adds value (CI & ad‑hoc CLI runs).
6. **Cache every expensive analysis result in the existing Supabase table**. If new columns or tables are required, **pause and notify the maintainer before applying migrations**.

---

## Detailed Tasks

### 1. Lighthouse‑powered SEO

* **Install deps**

  ```bash
  npm i --save lighthouse chrome-launcher @types/lighthouse
  ```
* \*\*Create \*\*\`\`

  ```ts
  import lighthouse from 'lighthouse';
  import {launch} from 'chrome-launcher';
  import type {Lhr} from 'lighthouse';

  export async function runLighthouse(url: string, categories: string[]): Promise<Lhr> {
    const chrome = await launch({chromeFlags: ['--headless']});
    const {lhr}  = await lighthouse(url, {
      port: chrome.port,
      output: 'json',
      onlyCategories: categories,
      disableDeviceEmulation: true,
      disableStorageReset: true,
    });
    await chrome.kill();
    return lhr as Lhr;
  }
  ```
* **Modify ****\`\`**** route**

  1. Remove `fetchPageSpeedOverview` import.
  2. Call `runLighthouse(url, ['seo'])`.
  3. Extract `lhr.categories.seo.score` (0‑1 → multiply by 100) plus any sub‑audits you need.
  4. **Cache** the whole `lhr` JSON blob in Supabase under key `{url, analysis_type:'seo'}` with `expires_at` 24 h later.

### 2. Tech Tab – fill placeholders

* \*\*In \*\*\`\` (or create a dedicated route if cleaner):

  1. Call `runLighthouse(url, ['best-practices'])` and merge relevant audits (HTTP/2, minification, image formats, etc.).
  2. After the Playwright page is loaded, inject axe‑core (see *Task 3*) and collect security‑header & landmark issues.
  3. Map results back into the `technical.*` JSON keys that the Tech tab expects.
* **Dependencies**

  ```bash
  npm i --save @axe-core/playwright
  ```

### 3. UI Tab – contrast warnings via axe‑core

* In the `GET /api/colors` Playwright context **after** colours & fonts are extracted:

  ```ts
  import {injectAxe, getViolations} from '@axe-core/playwright';
  await injectAxe(page);
  const violations = await getViolations(page, { runOnly: { type: 'tag', values: ['wcag2a', 'wcag2aa'] } });
  const contrast = violations.filter(v => v.id === 'color-contrast');
  ```
* Return `contrast` array as `ui.contrastIssues`.
* **Cache** the axe‑core JSON alongside the colour/font cache row.

### 4. Performance / CWV via Lighthouse

* **Modify any ****\`\`**** or similar routes** to call:

  ```ts
  const lhr = await runLighthouse(url, ['performance']);
  const {cls, lcp, tbt, inp} = lhr.audits;
  ```
* Persist raw Lighthouse JSON and derive Core Web Vitals + Opportunities for the UI.

### 5. pa11y Integration

* **Install**

  ```bash
  npm i --save-dev pa11y
  ```
* **Create npm script**

  ```json
  "scripts": {
     "pa11y": "pa11y http://localhost:3000 --runner axe --reporter html --threshold 10 -S pa11y-report.html"
  }
  ```
* **Add GitHub Action** `.github/workflows/accessibility.yml` that runs `npm run pa11y` on PRs and uploads the HTML report artifact.

### 6. Supabase Caching Rules

* Always \`\`.
* Respect a 24 h TTL (`expires_at` column).
* **If you discover that new fields are required – e.g. **\`\`** – pause execution and output**:

  > `SCHEMA CHANGE NEEDED: propose adding column <name> type <jsonb/text> to <table>`

---

## Acceptance Checklist (self‑verify before completing)

*

Return `✅ Done` once all boxes are ticked **or** issue a `SCHEMA CHANGE NEEDED` message if you cannot cache without migrations.
