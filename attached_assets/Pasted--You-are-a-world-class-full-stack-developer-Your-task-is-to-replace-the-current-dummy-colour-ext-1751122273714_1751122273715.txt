**You are a world‑class full‑stack developer.** Your task is to replace the current dummy colour‑extraction prototype with a real, Playwright‑powered implementation that slots straight into the existing dashboard. Follow the steps below *exactly*. This is the **first of two sequential prompts**, so do not attempt to add front-end rendering logic or client-facing enhancements until prompted next.

---

### 1  Dependencies (update **package.json**)

1. Add **playwright**, **p‑queue**, **colord**, **color‑namer** as production deps.
2. Add @types/color‑namer as a dev‑dep if necessary (TS projects).
3. Remove any unused or placeholder packages used by the dummy backend.

---

### 2  Replace backend logic

Create all necessary files and modules for a working backend that:

* Accepts `POST /api/colors` with `{ url: string }`.
* Launches a shared headless Chromium instance using **Playwright**.
* Queues incoming jobs using **p‑queue**, limiting concurrency to 3.
* For each job, spins up a new **browser context**, navigates to the page, and collects up to **5 000** DOM nodes.
* Extracts computed CSS values for these properties:
  `color`, `background-color`, `border-*-color`, `fill`, `stroke`
* Normalises each color using **colord** and tags with human-friendly names using **color‑namer**.
* Returns JSON like this:

```json
[
  { "hex": "#ffffff", "name": "White", "property": "background-color", "occurrences": 42 },
  { "hex": "#222222", "name": "Very Dark Gray", "property": "color", "occurrences": 35 }
]
```

* Responds with appropriate HTTP status codes (400 for invalid URLs, 500/504 for timeouts).

---

### 3  Update existing server files

1. Integrate the new endpoint into the main Express app (e.g. in **server/index.ts** or similar).
2. If any placeholder or dummy files related to color extraction exist, delete or fully remove them.

---

### 4  Ensure API compatibility with frontend

The front-end component `ColorExtractionCard.tsx` currently expects structured color data grouped by usage (e.g. `background`, `text`, `icons`). Do **not** modify the frontend files yet.

Instead, ensure that your new route returns the flat color data with accurate CSS `property` fields and hex values. These will be mapped client-side in the second prompt.

---

✅ Double check:

* All extracted color values are deduplicated and normalised.
* The codebase has no leftover dummy logic.
* The new backend does **not** affect unrelated analysis routes.

Once this is done and functional, await the next prompt which will handle integration into the React dashboard.
