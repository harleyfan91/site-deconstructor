You are a **worldâ€‘class fullâ€‘stack developer** with deep expertise in NodeÂ +Â TypeScript, Next.js/React, Playwright, Supabase, and lean migrations. Implement **PhasesÂ 1â€“3** of the "singleâ€‘scrapeÂ + singleâ€‘endpoint" redesign while touching the fewest files possible.

**Project Goal**: Deliver a dashboard that loads quickly, relies on a *single* cached scrape per URL, exposes *one* public read endpoint (`/api/overview`), and preserves the current visual layout (colour blocks, expandable hex codes) and tech stack (Playwright, axeâ€‘core, Lighthouse). By the end of the full migration, every tab will render purely from the overview payloadâ€”no extra perâ€‘tab API calls.

Implement **PhasesÂ 1â€“3** of the "singleâ€‘scrapeÂ + singleâ€‘endpoint" redesign while touching the fewest files possible.

> **Do NOT** start Phasesâ€¯4â€‘6 (cache tuning, schema guards, test cleanâ€‘up) yetâ€”just leave TODO comments where relevant.

---

## ðŸŽ¯ PhaseÂ 1â€¯â€”â€¯Consolidate Data Flow (Backend)

### Goals

1. Expose **one public read endpoint**:

   * `GET /api/overview?url=â€¦` â†’ returns `{ ui: UIAnalysis, seo: â€¦, perf: â€¦, schemaVersion: '1.0.0' }`.
2. Provide one write/trigger endpoint (for CI / future queue):

   * `POST /api/scan` (idempotent) â†’ enqueues/executes a scrape and returns `{ status: 'queued' | 'running' | 'done' }`.
3. Ensure heavy scraping lives only in `server/services/uiScraper.ts` using `getOrCreateAnalysis(url)`.

### ADD & MODIFY steps (in this order)

1. **ADD** `server/routes/overview.ts`
   â€¢ `router.get('/api/overview', â€¦)` â€” parse `url`, call `getOrCreateAnalysis(url)`, return full JSON blob.
2. **ADD** `server/routes/scan.ts`
   â€¢ Thin POST that triggers `uiScraper.scrape(url, { force: true })` and streams status.
3. **MODIFY** `server/routes/index.ts`
   â€¢ Mount only `overview` and `scan` routes (plus any nonâ€‘UI routes that already exist).
4. **MODIFY** `server/services/uiScraper.ts`
   â€¢ Export `getOrCreateAnalysis(url)` if not already.
   â€¢ Make sure result object always contains the union of `colors`, `fonts`, `images`, `accessibility`, `lighthouse`, etc.
5. **MODIFY** `server/lib/cache.ts`
   â€¢ Standardise key: `ui_analysis:<url>`.

### DELETE (after tests pass)

* Entire route files: `colors.ts`, `fonts.ts`, `lighthouse.ts`, `ui.ts`, or any others that spawn their own Playwright session.
* Any adâ€‘hoc caches inside those routes.
* Duplicate utils referenced *only* by the deleted routes.

ðŸš¨ **Delete, donâ€™t comment.** Use `git grep` to locate *all* references and confirm no compile errors remain.

---

## ðŸŽ¯ PhaseÂ 2â€¯â€”â€¯Reâ€‘wire UI Tab (Frontend)

### Goals

* Render Colour, Font, Image, Accessibility cards from **props alone**; zero perâ€‘card fetches.

### ADD & MODIFY steps

1. **MODIFY** `UIAnalysisTab.tsx`
   â€¢ Assume parent `data.ui` is present; pass `data.ui.colors` â†’ `ColorExtractionCard`, etc.
   â€¢ Remove/replace any `useColors`, `useFonts`, etc. imports.
2. **MODIFY** child cards only if they still contain their own fetch logicâ€”strip it out so they become pure presentational components.
3. **MODIFY** topâ€‘level dashboard data fetch (probably in `DashboardPage.tsx` or `getServerSideProps`)
   â€¢ Fetch **only** `/api/overview` once.
   â€¢ Store response in Reactâ€‘Query key `['overview', url]`.

### DELETE (postâ€‘compile)

* Hooks: `useColors.ts`, `useFonts.ts`, `useLighthouse.ts`, and their tests.
* Any fetch logic left inside card components.

---

## ðŸŽ¯ PhaseÂ 3â€¯â€”â€¯Deadâ€‘Code Purge (Repoâ€‘wide)

*After PhaseÂ 1Â &Â 2 compile and run successfully:*

1. Run `git grep -E '/api/(colors|fonts|lighthouse|ui)'` â€” every match must be either deleted or switched to `/api/overview`.
2. Remove leftover Playwright helpers that are not imported by `uiScraper`.
3. Delete obsolete TypeScript types (`ColorResponse`, `FontResponse`, etc.). Replace with derived `Pick<UIAnalysis, â€¦>` where needed.

---

## âœ… Validation Checklist

Use this list to confirm the migration is complete **before merging**:

1. **Backend API**

   * `GET /api/overview?url=â€¦` responds **200** with keys `ui`, `seo`, `perf`, `schemaVersion`.
   * `POST /api/scan` responds **202/200** and returns `{ status: 'queued' | 'running' | 'done' }`.
   * Requests to **legacy endpoints** `/api/colors`, `/api/fonts`, `/api/lighthouse`, `/api/ui` now return **404**.
2. **Backend runtime health**

   * `npm run test` (or `pnpm test`) passes.
   * `tsc --noEmit` shows **0 TypeScript errors**.
   * Server start-up logs show exactly **one** Playwright browser launch per new URL, none on repeat hits (verify via logging).
3. **Source hygiene**

   * `git grep -E '/api/(colors|fonts|lighthouse|ui)'` returns **no matches** in `*.ts`/`*.tsx` files.
   * Deleted files (`colors.ts`, `fonts.ts`, `lighthouse.ts`, `ui.ts`, unused hooks) are **gone**, not commented out.
   * No ad-hoc `inMemoryCache` declarations remain; all caching goes through `getOrCreateAnalysis`.
4. **Front-end behaviour**

   * Dashboard makes **exactly one** network request (`/api/overview`) on initial load (check DevTools â†’ Network).
   * Colour, Font, Image, Accessibility cards render immediately from propsâ€”no spinner/fetch.
   * Clicking through every tab triggers **zero** additional API calls.
   * UI state (expand/collapse of colour buckets) still works as before.
5. **Performance sanity-check**

   * First paint of dashboard on warm cache â©½ 500 ms (verify in Lighthouse/DevTools).
   * Cold cache: overview returns `status:'pending'` quickly (<300 ms) while scrape runs in background; UI shows placeholder, then auto-updates without page refresh.
6. **Commit hygiene**

   * Commits follow the sequence:
     `feat(api): add overview & scan routes` â†’ `refactor(ui): cards use overview slice` â†’ `chore: remove legacy endpoints`.
   * TODO comments left for Phases 4-6; **no code** for those phases implemented yet.

If every box is checked, Phases 1-3 are successfully migrated and the codebase is ready for cache tuning and test hardening in the next steps.

## ðŸ¤– Agent Guidance

1. **Think > Code** â€” spend at least 3Â min mapping current route files and hooks before editing.
2. Work in the listed order: *ADD / MODIFY* first, **run the app**, then execute the *DELETE* steps.
3. Include focused commit messages, e.g. `feat(api): add unified overview route` / `refactor(ui): cards use overview slice` / `chore: remove legacy color endpoints`.
4. Leave TODOs for PhasesÂ 4â€‘6 but **do not implement** them now.

---

*(PhasesÂ 4â€‘6 preview â€” FYI, no action now)*

* **PhaseÂ 4:** tighten cache TTL & queue concurrency, add schemaVersion guard.
* **PhaseÂ 5:** integration tests & e2e.
* **PhaseÂ 6:** type cleanup, payload slimming, auth & CORS hardening.
