**You are a world‑class full‑stack developer and award‑winning UX engineer.**  This is **Prompt 3 of 3**.  Prompts 1 & 2 shipped a functional Playwright backend and a React dashboard that already shows the four basic colour buckets (`background`, `text`, `border`, `icons`).

Your mission now is to introduce seven additional semantic buckets while **keeping the originals intact**.  The existing code does **not** have a dedicated `bucket()` helper yet—the grouping happens inline inside `site‑deconstructor/server/lib/color‑extraction.ts`.  You will therefore create the mapping logic from scratch, drop it in wherever you think best, and wire everything up so the UI displays the expanded taxonomy.

---

## Key landmarks in the repository

| Area                         | Path (relative to repo root)                                          | What you’ll find                                                                                                                                      |
| ---------------------------- | --------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
| Colour extraction + grouping | `site-deconstructor/server/lib/color-extraction.ts`                   | Loads the page with Playwright, walks the DOM, **manually pushes colours into groups** (look for an object like `{ background: [], text: [], ... }`). |
| Colour API route             | `server/routes/colors.ts` (or similar)                                | Calls the extractor and returns JSON to the client.                                                                                                   |
| Dashboard card               | `client/src/components/dashboard/ui-analysis/ColorExtractionCard.tsx` | Renders an accordion per bucket. `SECTION_ORDER` is currently hard‑coded to four buckets.                                                             |

If any filenames differ slightly, adjust while keeping the intent.

---

## 1  Backend – extract and centralise bucket‑mapping logic

1. **Locate** the inline grouping logic in `site-deconstructor/server/lib/color-extraction.ts`—look for where colours are manually pushed into `background`, `text`, `border`, or `icons` arrays.
2. **Extract** that logic into a standalone helper (you choose its name and placement).  Its job is to take the CSS property name (e.g. `box-shadow`), optionally the element selector or tag, and/or the raw value string, and return the appropriate bucket key.
3. **Ensure** this helper returns one of the original buckets (`background`, `text`, `border`, `icons`) or any of the seven new buckets (`accent`, `decoration`, `shadow`, `gradient`, `svg`, `link`, `highlight`).  You may include a generic `other` fallback.
4. **Implement** the mapping rules (superset of old + new):

   * **background**: `background-color`, shorthand `background: <color>` without `gradient(`
   * **text**: `color`, any `text-*` except those mapped to `decoration`
   * **border**: `border-*`, `outline-color`, `column-rule-color`
   * **icons**: `fill`, `stroke` on `<svg>` icons
   * **accent**: `accent-color`, `caret-color`
   * **decoration**: `text-decoration-color`, `text-emphasis-color`, `text-stroke-color`
   * **shadow**: `box-shadow`, `text-shadow`, `filter` with `drop-shadow(`
   * **gradient**: `background`, `background-image`, `mask-image` containing `gradient(`
   * **svg**: `fill`, `stroke`, `stop-color`, `flood-color`, `lighting-color` on non-icon SVGs
   * **link**: rules targeting `a` elements or link pseudo-classes (`:link`, `:hover`, etc.)
   * **highlight**: `<mark>` backgrounds or any `highlight-color` value
   * **other**: fallback for anything unexpected
5. **Wire up**: in `color-extraction.ts`, replace the inline pushes with calls to your new helper, routing each colour into its bucket.
6. **Keep** the existing cap of 5 000 inspected nodes and the Playwright queue logic unchanged.

## 2  Frontend – make the dashboard dynamic

  Frontend – make the dashboard dynamic

1. Open `client/src/components/dashboard/ui-analysis/ColorExtractionCard.tsx`.
2. Replace the old hard‑coded `SECTION_ORDER` (at the top of the file) with:

   ```ts
   const SECTION_ORDER = [
     'background', 'text', 'border', 'icons',
     'accent', 'decoration', 'shadow', 'gradient',
     'svg', 'link', 'highlight', 'other',
   ] as const;
   ```
3. Modify the grouping logic (where it maps the flat API data into buckets) so that it uses the dynamic `SECTION_ORDER` and filters out empty buckets:

   ```ts
   const grouped: Record<string, Color[]> = {/* existing grouping code */};
   const sections = SECTION_ORDER.filter(k => grouped[k] && grouped[k].length);
   ```
4. Ensure the `sections` array drives the accordion rendering and glow effects, so only non‑empty buckets appear in the UI.
5. No major UI redesign required.

---

## 3  Tests & validation

1. Create or extend Jest tests for the new bucket‑mapping helper, supplying representative samples for each bucket.
2. Run the dev server with a synthetic HTML page that exercises every case; confirm the dashboard shows all buckets populated correctly.
3. `npm test` (or `pnpm test`) must pass.

---

### Completion checklist

* Mapping covers **all 11 buckets**.
* Old inline grouping logic is deleted.
* Front‑end adapts automatically.
* No dummy data or dead code remains.

Good luck – ship it!
