**You are a world‑class full‑stack developer, expert front‑end designer, *and* award‑winning UX engineer.**  The new Playwright‑powered backend from Prompt 1 is working.  Your job in this **second and final prompt** is to wire that API into the existing dashboard UI and delete every last trace of the dummy colour‑extraction logic.

---

## 0  Scope

* **Back‑end is DONE** – do not touch server code except where explicitly instructed to remove placeholders.
* All work happens in the **React/TypeScript** front‑end (`client/` folder) plus optionally unit tests.

---

## 1  Remove placeholder data

1. In **`ColorExtractionCard.tsx`**, delete any import or inline constant named `PLACEHOLDER_USAGE_GROUPS`, `dummyColors`, etc.
2. If a standalone helper or JSON file contains that data, delete the file entirely.

---

## 2  Fetch live colour data

Inside **`ColorExtractionCard.tsx`**:

1. Add a `const [usageGroups, setUsageGroups] = useState<UsageGroup[]>([]);` and `const [loading, setLoading] = useState(true);`.
2. Replace the current `useEffect` (or add one) that:

   ```ts
   useEffect(() => {
     (async () => {
       try {
         const res = await fetch('/api/colors', {
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({ url: props.url ?? window.location.href })
         });
         if (!res.ok) throw new Error(`HTTP ${res.status}`);
         const flat = await res.json();

         // 2a. Map flat → grouped structure expected by the UI
         const groups: Record<string, { name: string; colors: { hex: string }[] }[]> = {};
         flat.forEach(({ hex, property }) => {
           const key = property.startsWith('background') ? 'background'
                     : property === 'color'              ? 'text'
                     : /border/.test(property)            ? 'border'
                     : /fill|stroke/.test(property)       ? 'icons'
                     : 'other';
           groups[key] ??= [{ name: 'All', colors: [] }];
           groups[key][0].colors.push({ hex });
         });

         const arr = Object.entries(groups).map(([name, groups]) => ({ name, groups }));
         setUsageGroups(arr);
       } catch (err) {
         console.error(err);
         setUsageGroups([]);
       } finally {
         setLoading(false);
       }
     })();
   }, [props.url]);
   ```
3. Render a `<CircularProgress />` (or existing skeleton component) while `loading` is true.  Render an `<Alert severity="error">` if `!loading && usageGroups.length === 0`.

---

## 3  Propagate the URL (optional)

* If `UIAnalysisTab.tsx` or its parent already knows which site is being analysed, pass it down:
  `<ColorExtractionCard url={currentUrl} />`.
* Otherwise the fallback `window.location.href` keeps existing behaviour.

Only **update these existing files** as needed:

* `ColorExtractionCard.tsx`
* `UIAnalysisTab.tsx` (if adding `url` prop)
* Any shared typings file that defines `UsageGroup`.

No new front‑end files are required, but feel free to create utility hooks/helpers if they simplify the card (Replit may choose the filename).

---

## 4  Delete leftover dummy components

Search the codebase for `DummyColor`, `ColorPlaceholder`, or any comment referencing “TEMP” or “DUMMY” within the colour‑extraction UI.  Remove them.

---

## 5  Unit tests (bonus but encouraged)

* Add tests in the existing `__tests__/` structure to cover:

  * Successful fetch and mapping (mock the `/api/colors` response).
  * Error state renders `<Alert>`.
  * Loading state renders spinner.

Use **Jest + React Testing Library**.  Filename choice is yours.

---

## 6  Manual QA checklist

1. Start the dev server, navigate to a page with the dashboard.
2. Enter/verify the target URL and open the “Colour Extraction” accordion.
3. Chips should match the site’s palette; dev‑tools should show real hex codes.
4. Simulate a 500 response – verify error alert appears and no crash.

---

### Completion definition

* **No placeholder data** anywhere in the front‑end.
* Dashboard card fetches live data from `/api/colors` and displays chips correctly grouped.
* Build passes, linter passes, all tests green.

Once done, commit and push. ✅
