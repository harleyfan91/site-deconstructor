You are an expert full‑stack developer working in a Replit environment. Upgrade the **backend** so the **Content** tab displays real numbers, **while keeping the UI responsive** with per‑section loading indicators. Minimal or no JSX edits—reuse the existing `<LoadingIndicator/>` (or equivalent) component already used in the Overview/UI tabs.

---
### Frameworks / libraries to verify
1. **Express** – ensure `/api/analyze` (main) and `/api/scrape` (Playwright scrape) routes return JSON promptly.
2. **Playwright** – headless browser to:
   • collect **all `<img>` URLs**
   • grab full raw HTML for text extraction.
3. **@mozilla/readability** + **jsdom** – parse HTML, compute:
   • `wordCount` (total words)
   • `readabilityScore` (Flesch‑Kincaid grade).
4. **Supabase** – cache results in `analysis_cache` (`url_hash`, `original_url`, `analysis_data`, `created_at`, `expires_at`).

---
### JSON payload to emit
Add the following under `data` (same envelope already returned by `/api/analyze`):
```ts
{
  ui: {
    imageAnalysis: {
      photoUrls: string[],  // photos only
      iconUrls:  string[]   // icons only
    }
  },
  content: {
    wordCount: number,
    readabilityScore: number
  }
}
```

---
### Implementation tasks
1. **Scraping logic**
   - Extend Playwright crawl: classify each `<img>` (area > 32×32 → **photo**, else **icon**).
   - Use Readability+jsdom for main article extraction; count words; compute F‑K grade (helper function okay).
2. **Caching**
   - Upsert the new `ui.imageAnalysis` and `content` objects into `analysis_cache.analysis_data` with a TTL (e.g. 1 h).
3. **Fallback markers**
   - Replace any fallback numbers/arrays with the literal exclamation point (`"!"`) so gaps are obvious.
4. **Maintain background loading**
   - Ensure the API responds quickly by returning available cached data first; trigger Playwright/Lighthouse scrape **asynchronously** if cache is stale.
   - Frontend already shows global loaders; inject `"pending": true` flags or separate endpoints so each card can display its own `<LoadingIndicator/>` until its slice of data arrives.
   - **Do not remodel UI**—just make sure each card receives either real data or `"!"`, enabling the existing loading patterns.

---
### Files to edit
- `server/routes.ts` (or `src/server/index.ts`) – add async refresh logic, response shape.
- `server/utils/scraper.ts` – Playwright + Readability work.
- `server/utils/cache.ts` – Supabase read/write helper.
- *Optional minimal JSX touch* (if necessary): only to insert `<LoadingIndicator/>` wrappers mirroring the pattern used in Overview/UI tabs.

Write code diff snippets only—no full‑file rewrites. Maintain the existing architecture.
