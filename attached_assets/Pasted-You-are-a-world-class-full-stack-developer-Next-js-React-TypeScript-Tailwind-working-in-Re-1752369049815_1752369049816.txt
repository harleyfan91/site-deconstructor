You are a **world‑class full‑stack developer** (Next.js + React, TypeScript, Tailwind) working in Replit on the open‑source **Site‑Deconstructor** repository.

---

\## 🏁 Mission
We are in **Phase 2** of the Accessibility & Contrast overhaul.  The backend refactor is complete.  Your job now is to:

1. **Create the frontend UI elements** inside the existing *Accessibility & Contrast* card (keep the header & icon already on screen).
2. **Wire in the Lighthouse Accessibility Score** by fetching it from the Performance API.
3. Ensure everything compiles & hot‑reloads locally in Replit.

---

\## 📐 UI spec (inside the card)
Render the following blocks **in this order**, reusing house components (`<Card>`, `<SectionHeader>`, `<MetricRow>`, `<GaugeMini>`, `<CopyButton>`, `<Badge>`, `<Pill>`, etc.).

1. **Accessibility Score**
   • Progress bar gauge (same component & colouring as SEO & Performance gauges) labelled **"Accessibility Score"**.
   • Value = `lighthouse.categories.accessibility.score * 100` (integer).
   • Colour mapping: `≥ 90` green, `50‑89` amber, `< 50` red (same palette as SEO & Performance gauges).
2. **Hard‑to‑read spots table**
   Columns: *Selector* • *Contrast ratio* • *Suggested hex* (with `<CopyButton>`).
   Data source: `axeColorContrast` list from `/api/ui` response.
3. **Contrast ratio summary badge**
   Format: `4.3 : 1 • AA ✓ / AAA ✕` (values from `wcagSummary`).
4. **Alt‑text coverage metric row**
   Format: `92 % with alt • 7 % poor` (values from `altStats`).
5. **Missing landmark / lang chips** (optional, hide if none)
   Pills: `nav missing`, `lang missing`, etc.

Use Tailwind grid classes to keep rows tight (gap‑y‑2) and align numbers right for quick scanning.

---

\## 🔌 Data fetching

### 1 – Accessibility Score

`hooks/useAccessibilityScore.ts`

```ts
import useSWR from 'swr';
import { fetcher } from '@/lib/fetcher';

export function useAccessibilityScore(url: string) {
  const { data, error } = useSWR(
    url ? `/api/performance?url=${encodeURIComponent(url)}` : null,
    fetcher,
    { dedupingInterval: 30_000 }
  );
  return {
    score: data?.lighthouse?.categories?.accessibility?.score
      ? Math.round(data.lighthouse.categories.accessibility.score * 100)
      : undefined,
    isLoading: !error && !data,
    isError: error,
  };
}
```

*Call this hook inside `AccessibilityCard.tsx`; display a skeleton gauge until `isLoading` → false.*

\### 2 – UI Analysis JSON
Already returned by `/api/ui` after the backend refactor.  The relevant keys:

```ts
{
  axeColorContrast: Array<{ selector: string; ratio: number; suggestion: string }>,
  wcagSummary: { ratio: number; passAA: boolean; passAAA: boolean },
  altStats: { coverage: number; suspicious: number },
  missingLandmarks: string[]
}
```

Use the existing `useUIAnalysis()` hook.

---

\## 🛠 Backend notes (only if needed)
*The Lighthouse runner already exists* at `server/analysis/lighthouse.ts` and is invoked by `/api/performance`.  No server changes are required.  If for some reason it is missing in your branch, bring back the file from `main` and re‑export its handler.

---

\## ✅ Checklist

* [ ] Remove any legacy UI elements that were inside the card (metric rows / gauges) **but keep the header & icon**.
* [ ] Implement the new UI blocks as per spec.
* [ ] Add the `useAccessibilityScore` hook & call it.
* [ ] Ensure build passes (`pnpm test && next build`).
* [ ] Push to Replit for preview.

*No other part of the dashboard UI or backend should be modified in this task.*
