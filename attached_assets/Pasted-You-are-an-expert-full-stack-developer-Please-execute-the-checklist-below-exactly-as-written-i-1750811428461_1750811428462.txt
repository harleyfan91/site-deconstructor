You are an expert full stack developer. Please execute the checklist below **exactly as written**, in order, ensuring ALL existing frameworks and folder structure remain intact.  
⚠️  Do NOT modify any UI component markup or styling—backend only.  
⚠️  After each major step, run `npm run build && npm test` to confirm nothing breaks before continuing.

────────────────────────────────────────────────────────
1. Dependencies
────────────────────────────────────────────────────────
• In package.json, add the two missing libraries ONLY:
    "@supabase/supabase-js": "^2",
    "wappalyzer": "^7"
  then run `npm install` to update lock-files.

────────────────────────────────────────────────────────
2. Environment sample
────────────────────────────────────────────────────────
• Append these blank keys to **.env.example** (keep existing lines):
    VITE_SUPABASE_URL=
    VITE_SUPABASE_ANON_KEY=
    SUPABASE_SERVICE_ROLE_KEY=
 

────────────────────────────────────────────────────────
3. Supabase client helper
────────────────────────────────────────────────────────
• Create **src/lib/supabaseClient.ts** with:

```ts
import { createClient } from '@supabase/supabase-js';

const url = import.meta.env.VITE_SUPABASE_URL!;
const key = import.meta.env.VITE_SUPABASE_ANON_KEY!;

export const supabase = createClient(url, key);
────────────────────────────────────────────────────────
4. server/analyze.ts
────────────────────────────────────────────────────────
a) Insert Wappalyzer detection right before the JSON response is assembled:

import Wappalyzer from 'wappalyzer';
import { supabase } from '../src/lib/supabaseClient';

…

const wappalyzer = await new Wappalyzer().init();
const site       = await wappalyzer.open(url);
const { technologies } = await site.analyze();
await wappalyzer.destroy();

const techStack = technologies.map(t => ({
  category: t.categories[0]?.name ?? 'Unknown',
  technology: t.name
}));
b) Add techStack to the object already pushed into ctx / the final JSON.

c) Persist the summary to Supabase, but only when the service-role key exists:

if (process.env.SUPABASE_SERVICE_ROLE_KEY) {
  const admin = createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  );

  await admin.from('reports').upsert({
    url,
    scores: { performance, mobile, security },
    techStack
  });
}
────────────────────────────────────────────────────────
5. Front-end Tech tab
────────────────────────────────────────────────────────
• In src/components/dashboard/TechTab.tsx
– Replace any hard-coded tech array with the techStack returned by the API.
– Remove the literal text “(Powered by Wappalyzer)”.
– Keep styling and layout identical.

────────────────────────────────────────────────────────
6. README updates
────────────────────────────────────────────────────────
• Edit README.md:
– Remove all mentions of Lovable.
– Add a Supabase Setup section listing the three new env keys.
– In Tech-Stack Detection section, state that Wappalyzer now runs server-side.
– Update Testing section to show only npm test (Vitest).

────────────────────────────────────────────────────────
7. CI / Replit build fix
────────────────────────────────────────────────────────
• In .github/workflows/ci.yml (and .replit.nix if present)
– Add step before “npm test” that installs headless-Chrome deps:
sudo apt-get update && sudo apt-get install -y libgbm-dev.

────────────────────────────────────────────────────────
8. Dead code removal
────────────────────────────────────────────────────────
• Search entire repo for commented-out Supabase code; delete those lines only.

────────────────────────────────────────────────────────
9. Verification
────────────────────────────────────────────────────────
• Run: npm run build && npm test – must pass.
• Start dev server, analyze https://example.com, ensure:
– Tech tab lists real technologies, not “HTML5 / HTTPS” stubs.
– No UI regressions.

Stop if any step fails; fix before proceeding. Do not change anything beyond this checklist.