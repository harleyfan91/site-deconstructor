You are a world class full stack developer working in a Replit environment. Your goal is to refactor an existing codebase to improve the speed between initiating a URL analysis and displaying partial data on the Overview tab, without altering any UI elements. Implement the following in a single batch:

1. Search the project for any files that handle the `/api/analyze` endpoint or equivalent functionality; these files may have different names but serve the same purpose. If none exist, create a new `routes.ts` (or `.js`) under `server/`.
2. Add precise timing logs around every `await` in the analysis workflow to measure latencies for HTML fetch, PageSpeed Insights (PSI) call, Supabase cache read/write, and local parsing.
3. Refactor the existing analysis logic to parallelize `fetch(url)` and `fetchPageSpeedOverview(url)` in a `Promise.all`. Also kick off the Supabase `SELECT` cache lookup concurrently in the same `Promise.all` call.
4. Split the single `/api/analyze` route into two endpoints:

   * **`/api/analyze/quick`**: Fetch the HTML, run local parsing, and return only the Overview JSON payload.
   * **`/api/analyze/full`**: Perform the PSI audit, read/write to your existing `analysis_cache` table (columns: `url_hash`, `original_url`, `analysis_data`, `created_at`, `expires_at`), and return the full JSON payload.
5. Create or update a Supabase Edge Function named `psi-cache` that:

   * Computes `url_hash` (e.g., SHA256 of the URL).
   * Checks `analysis_cache` for a non-expired record (compare `expires_at > now()`).
   * Returns cached `analysis_data` on a hit.
   * On a miss, calls the PSI API, then upserts `{ url_hash, original_url: url, analysis_data, created_at, expires_at: now()+24h }` into `analysis_cache`, and returns the fresh data.
6. Update your server code to replace direct PSI and Supabase calls with a single fetch to the Edge Function: `fetch(https://<project>.supabase.co/functions/v1/psi-cache?url=…)`.
7. Increase your in-memory request cache TTL to 30 minutes (or implement an LRU) so repeated calls in the same session are instantaneous.
8. Add an `AbortController` timeout of \~25 seconds around any external PSI calls, returning a 202 status with an "audit pending" message if exceeded.
9. Write a basic regression test (e.g., with Jest) that uses network throttling to verify:

   * Uncached Overview data returns in ≤5s.
   * Full audit data merges correctly when it arrives.

Ensure that if any expected file or function is missing, you create it; if a file exists under a different name, adapt it rather than creating duplicates. Do not modify any UI components—focus solely on server-side and caching logic. Complete all steps in this single Replit run.
