You are a world class, full stack developer adept at migrating codebases. We are working on debugging the code after the Lovable migration exposed a few issues. Apply the **minimum, surgical edits** below so the code compiles cleanly.  
Do **not** alter any runtime logic or UI markup.

───────────────────────────────────────────────
1 · Vendor typings shim
─────────────────────────────
• Create **client/src/types/vendor.d.ts** with:

```ts
declare module 'color-namer';
declare module 'fontfaceobserver';
declare module 'wappalyzer';
```

────────────────────────────────────
2 · Extend shared data types
─────────────────────────────
• In **client/src/types/analysis.ts**

  a)  Append to `AnalysisOverview`:

  ```ts
    colors?: string[];
    fonts?: string[];
    images?: string[];
    imageAnalysis?: {
      totalImages: number;
      estimatedPhotos: number;
      estimatedIcons: number;
      imageUrls?: string[];
      photoUrls?: string[];
      iconUrls?: string[];
    };
    contrastIssues?: any[];
  ```

  b)  (If missing) add small `UIAnalysis` interface with the same optional fields; several UI tabs import it.

────────────────────────────────
3 · Guard possibly-undefined props
─────────────────────────────
**OverviewTab.tsx**

```diff
- siteTitle={overview.siteTitle}
+ siteTitle={overview?.siteTitle ?? '—'}
```
```diff
- const created = new Date(overview.createdAt);
+ const created = overview?.createdAt ? new Date(overview.createdAt) : undefined;
```
Add:  
```ts
if (!overview) return null;
```
before JSX that references `data.data.overview`.

**SEOAnalysisTab.tsx**

Add near top:  
```ts
if (!seo) return null;
```
then reference `seo!` inside.

**UIAnalysisTab.tsx**

```ts
const ui = data.data.ui;
if (!ui) return null;
```

**TechTab.tsx** line ≈534  
```diff
- alt={tech.technology}
+ alt={tech?.technology ?? ''}
```

─────────────────────────────
4 · Fix implicit-any warnings
─────────────────────────────
*ColorExtractionCard, FontAnalysisCard, ImageAnalysisCard:*  
Annotate callback parameters, e.g. `(color: string) => {}`, `(font: string, index: number) => {}`, `(acc: any, img: { size: number }) => {}`.

─────────────────────────────
5 · Resolve exportUtils duplicates
─────────────────────────────
In **client/src/lib/exportUtils.ts**:  
Keep the **first** declarations of `const seoScore` / `const uxScore` and delete later duplicates (or wrap the second set in its own `{ … }` block).

─────────────────────────────
6 · Vite dev-server option
─────────────────────────────
**server/vite.ts**

```diff
- allowedHosts: false,
+ allowedHosts: true,
```

─────────────────────────────
7 · Type stubs (optional nicety)
─────────────────────────────
Run:  
```bash
npm i -D @types/color-namer @types/fontfaceobserver
```

─────────────────────────────
8 · Verify everything
─────────────────────────────
After edits, run:

```bash
npm install
npm run build
npm test          # or bash tests/run-tests.sh
```

If the TypeScript compiler or tests surface **new** errors, fix them with equally surgical tweaks before finishing.
