You are a **world‑class full‑stack developer** with deep expertise in Node + TypeScript, Next.js/React, Playwright, Supabase, and graceful refactors. Your mission: **unblock the Color Extraction Card** while touching the **fewest lines possible** on the backend.

---

## 🛠️ Context

* The **frontend still calls** `POST /api/colors` from `ColorExtractionCard.tsx` and works well *when* that route responds quickly.
* The old `/api/colors` route still launches a full Playwright scrape, ignoring the new cached `uiScraper` ⇒ heavy, redundant, and timing‑out.
* Other dashboard tabs slow down because those long scrapes block the Node event loop.

👉 **Goal:** Keep the public endpoint **path & response shape** unchanged so we don’t touch the React code *yet*, but refactor the backend so `/api/colors` becomes a **thin, cached proxy** to the unified scraper.

> 💡 We will DELETE the legacy heavy route *after* we prove the thin proxy works. No frontend edits required in this phase.

---

## 📝 Task List (ADD & MODIFY first, DELETE last)

1. **ADD** `server/routes/colorsProxy.ts`

   * Implement a fast Express handler:

     1. Parse `url` from body.
     2. Call `getOrCreateAnalysis(url)` from `server/services/uiScraper`.
     3. Extract only the `colors`, `contrastIssues`, `accessibilityScore`, `violations` slice and return it in the legacy shape so the card renders unchanged.
     4. If `timedOut` flag comes back, respond with 503 and `{ error: 'timeout' }`.

2. **MODIFY** `server/routes/index.ts`

   * Mount `colorsProxy` **before** mounting wildcard / 404 middleware.
   * Comment out the require/import line for the legacy `colors` route to prevent duplicate paths.

3. **MODIFY** `server/services/uiScraper.ts`

   * Ensure it attaches a `colors` array, `contrastIssues`, and `accessibilityScore` to the returned object if not already present (some older builds skipped this).
   * Guarantee the result is cached under the key `ui_analysis:<url>`.

4. **MODIFY** `server/lib/cache.ts` (if needed)

   * Expose `getOrCreateAnalysis(url)` helper so the proxy can import without circular deps.

5. **MODIFY TESTS** (if they exist) or add a quick integration test verifying:
   `POST /api/colors` with `{ url: 'https://example.com' }` → 200 ≤300 ms on warm cache.

6. **DELETE (last)**

   * `server/routes/colors.ts` **and** any utils solely referenced by it (e.g., `server/utils/colors/*` Playwright helpers that have duplicates in `uiScraper`).
   * Remove corresponding import from `server/routes/index.ts`.

---

## 🔍 Validation Checklist

*

---

## 🤖 Agent Guidance

1. **Think before you code** – spend at least 3 minutes scanning the repo for current route filenames and cache helpers so you reuse existing logic verbatim.
2. **Copy, don’t recreate** – import utility functions from `uiScraper` instead of re‑writing them.
3. **Keep diffs small** – no formatting sweeps or unrelated lint fixes.
4. **Run tests / dev server** locally to verify the Colour card renders and other tabs stay fast *before* deleting the old files.
5. **Commit message suggestion:** "feat(api): thin colors proxy uses cached uiScraper; remove legacy heavy route".

Deliver this in as few commits as possible.
