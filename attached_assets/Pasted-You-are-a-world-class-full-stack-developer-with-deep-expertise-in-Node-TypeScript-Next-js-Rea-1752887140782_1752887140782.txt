You are a **world‑class full‑stack developer** with deep expertise in Node + TypeScript, Next.js/React, Playwright, Supabase, high‑performance caching, and automated testing.

**Context**: Phases 1–3 of the “single‑scrape + single‑endpoint” migration are already merged. The codebase now exposes only:

* `GET /api/overview?url=…` (read‑only, returns full JSON blob)
* `POST /api/scan`          (idempotent trigger)

All frontend tabs render purely from the overview slice; legacy routes, hooks, and utils have been deleted.

Your task: **Implement Phases 4–6** to harden performance, reliability, and code quality—*without touching visual UI or adding brand‑new endpoints.* Follow the order below and keep diffs surgical.

> **Do NOT** reopen or recreate any of the deleted legacy routes. Focus only on the items below.

---

## 🚀 Phase 4 — Cache, Queue & Schema Guards

### Goals

1. Protect against stale JSON by embedding a **schemaVersion guard**.
2. Keep Playwright jobs from saturating the server: **bounded queue + per‑domain throttling**.
3. Tune cache TTLs and payload size.

### ADD & MODIFY (in this order)

1. **MODIFY** `server/services/uiScraper.ts`
   • Add `const CURRENT_VERSION = '1.1.0'` (update as you evolve).
   • Before returning cached JSON, check `row.schemaVersion === CURRENT_VERSION`; if false, trigger a fresh scrape and return `{ status:'pending' }`.
   • Attach `schemaVersion: CURRENT_VERSION` to new results.
2. **ADD** `server/lib/queue.ts`
   • Export a `PQueue` instance with `concurrency = 3`.
   • Wrap `playwrightLaunch()` calls inside `queue.add(() => …)`.
   • Add per‑domain key using a `Map<string, Promise>` to avoid simultaneous scrapes of the same host.
3. **MODIFY** `server/lib/cache.ts`
   • Set TTL to 24 h for successful scrapes, 15 min for failed ones.
   • Move bulky artefacts (Lighthouse trace, screenshots) to Supabase storage bucket; cache only the presigned URLs.
4. **MODIFY** `server/routes/overview.ts`
   • If `getOrCreateAnalysis` returns `{ status:'pending' }`, respond **202 Accepted**; client already polls.

### DELETE (last)

* Any ad‑hoc `new PQueue` instantiations in other modules—centralise all queueing in `server/lib/queue.ts`.
* Remove in‑file Playwright `await browser.close()` try/catch blocks now handled in the queued task.

---

## 🧪 Phase 5 — Automated Tests & CI

### Goals

* Prevent regressions on route shape, cache behaviour, and queue concurrency.

### ADD & MODIFY

1. **ADD** `tests/api/overview.test.ts`
   • Mocks `uiScraper` to return a dummy blob; assert 200 vs. 202 status codes.
2. **ADD** `tests/queue/queue.test.ts`
   • Spawn 10 parallel `getOrCreateAnalysis` calls for the same URL; assert queue length ≤3 and only **one** Playwright run (mock).
3. **ADD** GitHub Actions workflow `.github/workflows/ci.yml`
   • Steps: checkout → `pnpm install` → `pnpm test` → `pnpm build`.
4. **MODIFY** existing test scripts in `package.json` to include `--runInBand` if flaky.

### DELETE

* Remove obsolete snapshot tests that depended on legacy `/api/colors` etc.

---

## 🎨 Phase 6 — Type Cleanup & Security Hardening

### Goals

* Replace bespoke response types with derived generics.
* Lock down CORS and auth for the single public endpoint.

### ADD & MODIFY

1. **MODIFY** `types/index.d.ts`
   • `export type UIAnalysis = { colors: …; fonts: …; /* full shape */ ; schemaVersion: string }`.
   • `export type OverviewResponse = Awaited<ReturnType<typeof getOrCreateAnalysis>>`.
2. **MODIFY** `server/index.ts`
   • Apply CORS middleware: `origin: ['https://dashboard.yoursite.com']`.
   • Add simple API key check for `POST /api/scan` (`x-api-key` header).
3. **MODIFY** any component type imports to use the new `OverviewResponse`.

### DELETE

* `types/ColorSlice.d.ts`, `types/FontSlice.d.ts`, or any file duplicating the new unified typings.

---

## ✅ Validation Checklist (Phases 4‑6)

1. `GET /api/overview?url=…` returns **202** on first hit (cold cache), **200** thereafter with `schemaVersion:'1.1.0'`.
2. Supabase table rows show `schemaVersion = '1.1.0'` and expire after 24 h.
3. Queue never exceeds `concurrency = 3`; duplicate URL requests share the same promise.
4. Lighthouse trace URLs are signed and **<5 kB** of JSON returns in `/overview`.
5. `pnpm test` passes locally and in GitHub Actions.
6. No TypeScript errors after deleting legacy slice types.
7. CORS only allows the production dashboard origin; unauthenticated `POST /api/scan` returns **401**.

---

## 🤖 Agent Guidance

1. **Think > Code** — inspect cache, queue, and schema codepaths first.
2. Apply **ADD / MODIFY** changes in the order above; run tests; then perform the **DELETE** cleanup.
3. Keep commits focused:

   * `feat(cache): add schemaVersion check & PQueue`
   * `test(api): add overview and queue tests`
   * `chore(types): unify OverviewResponse & remove slices`
4. No UI changes—*pure backend & test work.*

Good luck finishing the migration!
